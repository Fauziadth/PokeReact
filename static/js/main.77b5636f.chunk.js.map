{"version":3,"sources":["Component/PokeProfile.js","Component/PageLayout.js","Component/PokePage.js","App.js","serviceWorker.js","index.js"],"names":["ProfileBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","capitalizeFirst","name","toUpperCase","slice","pokeAPI","state","pokeID","id","pokemon","undefined","_this2","fetch","concat","then","res","json","setState","fetchPost","prevProps","prevState","_this$state","react_default","a","createElement","className","react_router_dom","to","src","sprites","front_default","alt","Component","PageLayout","updatePagination","n","tempContent","i","push","PokeProfile","key","handleIdChange","bind","assertThisInitialized","console","log","pokeContent","contentNumber","event","parseInt","target","value","temp","isNaN","onChange","change","ProfilePage","params","match","flavorAPI","poke","flavor","App","react_router","path","exact","render","PageLayout_PageLayout","assign","component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77b5636f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ProfileBox extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.pokeAPI = 'https://pokeapi.co/api/v2/pokemon'\r\n    this.state = {\r\n      pokeID : props.id?props.id:1,\r\n      pokemon : undefined\r\n    }\r\n    // this.handleIdChange = this.handleIdChange.bind(this);\r\n  }\r\n\r\n  fetchPost() {\r\n    const { pokeID } = this.state;\r\n    fetch(`${this.pokeAPI}/${pokeID}`)\r\n      .then(res => res.json())\r\n      .then(pokemon => this.setState({ pokemon }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchPost();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.pokeID !== this.state.pokeID) {\r\n      this.fetchPost();\r\n    }\r\n  }\r\n\r\n  capitalizeFirst = (name) => {\r\n    let capName = name[0].toUpperCase() + name.slice(1);\r\n    return capName;\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    const { pokeID, pokemon } = this.state;\r\n    return (\r\n      <div className = \"profileBox\">\r\n        {pokemon && \r\n        <Link to={'/poke/'+pokeID } className='link'>\r\n          <div>\r\n              <h3 className='blue'>{this.capitalizeFirst(pokemon.name)}</h3> <h4 className='blue id'>{pokeID}</h4>\r\n            <img src={pokemon.sprites.front_default} className=\"poke-sprite\" alt=\"\"/>\r\n            <p></p>\r\n          </div>\r\n        </Link>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileBox;","import React, { Component } from 'react';\r\nimport ProfileBox from './PokeProfile';\r\n\r\nexport default class PageLayout extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.handleIdChange = this.handleIdChange.bind(this);\r\n        this.updatePagination = this.updatePagination.bind(this);\r\n        console.log('Bawaan', props);\r\n        this.state = {\r\n            id : 1,\r\n            pokeContent : [],\r\n            contentNumber : this.props.id\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let pokeContent = this.updatePagination(this.state.contentNumber);\r\n        this.setState({\r\n            pokeContent\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        \r\n        if (this.props.id !== prevProps.id){\r\n            let pokeContent = this.updatePagination(this.props.id);\r\n            this.setState({\r\n                contentNumber : this.props.id,\r\n                pokeContent : pokeContent\r\n            })\r\n        }\r\n    }\r\n\r\n    updatePagination = function(n) {\r\n        let tempContent = [];\r\n        for (let i = 1; i<=n; i++){\r\n            tempContent.push(<ProfileBox key = {i} id={i}/>);\r\n        }\r\n        \r\n        return tempContent;\r\n        \r\n    }\r\n\r\n    handleIdChange (event) {\r\n        const contentNumber = parseInt(event.target.value, 10);\r\n        this.temp = contentNumber;\r\n        if (!isNaN(contentNumber) && contentNumber > 0) {\r\n            this.setState({ contentNumber });\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <h1 className = 'blue block'>Pokemon Library</h1>\r\n                    <select \r\n                        name=\"pageSize\" \r\n                        className = \"counterID block pagi\"\r\n                        onChange = {this.props.change} \r\n                    >\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"6\">6</option>\r\n                        <option value=\"15\">15</option>\r\n                        {/* <option value=\"25\">25</option> */}\r\n                    </select> \r\n                </header>\r\n                <div className= 'container'>\r\n                    <div className=\"half\">{this.state.pokeContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ProfilePage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    let params = props.match.params;\r\n    this.pokeAPI = 'https://pokeapi.co/api/v2/pokemon/' + params.id;\r\n    this.flavorAPI = 'https://pokeapi.co/api/v2/pokemon-species/' + params.id;\r\n    console.log('COBA DULU PROPS', params);\r\n    this.state = {\r\n      poke : null,\r\n      flavor : null\r\n    };\r\n  }\r\n\r\n  componentWillMount(){\r\n    fetch(`${this.pokeAPI}`)\r\n      .then(res => res.json())\r\n      .then(poke => {\r\n        console.log('hasil fetch ' ,poke);\r\n        this.setState({poke});\r\n      });\r\n\r\n    fetch(`${this.flavorAPI}`)\r\n    .then(res => res.json())\r\n    .then(flavor => {\r\n      console.log('hasil species ' ,flavor);\r\n      this.setState({flavor})\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // console.log('TERUPADTE')\r\n  }\r\n\r\n  // componentWillUnmount(){\r\n  //   console.log('Bye')\r\n  // }\r\n\r\n  render() {\r\n    let pokemon = this.state.poke;\r\n    return (\r\n      pokemon?\r\n      <div className = \"profilePage\">\r\n          <Link to='/'><h3>back</h3></Link>\r\n          <h1>{pokemon.name}</h1>\r\n          <img src = {pokemon.sprites.front_default} alt=''></img>\r\n      </div>:\r\n      <div className = \"profilePage\">\r\n        <h1>{`Fetching data... Please Wait!`}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfilePage;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport PageLayout from './Component/PageLayout';\r\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport ProfilePage from './Component/PokePage';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.handleIdChange = this.handleIdChange.bind(this);\r\n    this.state = {\r\n        id : 1,\r\n    }\r\n  }\r\n\r\n  handleIdChange (event) {\r\n    const contentNumber = parseInt(event.target.value, 10);\r\n    console.log('parent');\r\n    console.log('NOW', contentNumber, 'PREV', this.state.id);\r\n    this.temp = contentNumber;\r\n    if (!isNaN(contentNumber) && contentNumber > 0) {\r\n        this.setState({ id : contentNumber });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n            {/* <Route path=\"/\" exact component={PageLayout} change={this.handleIdChange} id={this.state.id}/> */}\r\n            <Route path=\"/\" exact render={(props) => (\r\n              <PageLayout {...props} change={this.handleIdChange} id = {this.state.id}/>\r\n            )} ></Route>\r\n            <Route path=\"/poke/:id\" component={ProfilePage} />\r\n        </Router>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}